{
  "ver": "1.0.27",
  "uuid": "f6b77afb-37e4-4198-9fb2-4e8257c2794e",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nattribute vec4 a_color_extra;\nvarying vec4 v_color;\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\nattribute float a_texture_idx;\nvarying float texture_idx;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_uv0;\n  texture_idx = a_texture_idx;\n  v_color = a_color * a_color_extra;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nvarying float texture_idx;\n#if USE_TEXTURE_LEVEL_1\n  uniform sampler2D texture0;\n#endif\n#if USE_TEXTURE_LEVEL_2\n  uniform sampler2D texture1;\n#endif\n#if USE_TEXTURE_LEVEL_3\n  uniform sampler2D texture2;\n  uniform sampler2D texture3;\n#endif\n#if USE_TEXTURE_LEVEL_4\n  uniform sampler2D texture4;\n  uniform sampler2D texture5;\n  uniform sampler2D texture6;\n  uniform sampler2D texture7;\n#endif\nuniform vec4 faceColor;\nuniform float faceDilate;\nuniform float faceSoftness;\n#if USE_OUTLINE\n  uniform vec4 outlineColor;\nuniform float outlineThickness;\n#endif\n#if USE_UNDERLAY\n  uniform vec4 underlayColor;\nuniform float underlayOffsetX;\nuniform float underlayOffsetY;\nuniform float underlayDilate;\nuniform float underlaySoftness;\n#endif\n#if USE_GLOW\n  uniform vec4 glowColor;\nuniform float glowOffset;\nuniform float glowInner;\nuniform float glowOuter;\nuniform float glowPower;\n#endif\nvoid main () {\n  float curDistance = 0.0;\n  #if USE_UNDERLAY\n    float underlayDistance = 0.0;\n  #endif\n  #if USE_TEXTURE_LEVEL_1\n    if (texture_idx <= 0.0) {\n      curDistance = texture2D(texture0, v_uv0).a;\n      #if USE_UNDERLAY\n        underlayDistance = texture2D(texture0, v_uv0 + vec2(-underlayOffsetX, underlayOffsetY)).a;\n      #endif\n    }\n  #endif\n  #if USE_TEXTURE_LEVEL_2\n    else if (texture_idx <= 1.0) {\n      curDistance = texture2D(texture1, v_uv0).a;\n      #if USE_UNDERLAY\n        underlayDistance = texture2D(texture1, v_uv0 + vec2(-underlayOffsetX, underlayOffsetY)).a;\n      #endif\n    }\n  #endif\n  #if USE_TEXTURE_LEVEL_3\n    else if (texture_idx <= 2.0) {\n      curDistance = texture2D(texture2, v_uv0).a;\n      #if USE_UNDERLAY\n        underlayDistance = texture2D(texture2, v_uv0 + vec2(-underlayOffsetX, underlayOffsetY)).a;\n      #endif\n    } else if (texture_idx <= 3.0) {\n      curDistance = texture2D(texture3, v_uv0).a;\n      #if USE_UNDERLAY\n        underlayDistance = texture2D(texture3, v_uv0 + vec2(-underlayOffsetX, underlayOffsetY)).a;\n      #endif\n    }\n  #endif\n  #if USE_TEXTURE_LEVEL_4\n    else if (texture_idx <= 4.0) {\n      curDistance = texture2D(texture4, v_uv0).a;\n      #if USE_UNDERLAY\n        underlayDistance = texture2D(texture4, v_uv0 + vec2(-underlayOffsetX, underlayOffsetY)).a;\n      #endif\n    } else if (texture_idx <= 5.0) {\n      curDistance = texture2D(texture5, v_uv0).a;\n      #if USE_UNDERLAY\n        underlayDistance = texture2D(texture5, v_uv0 + vec2(-underlayOffsetX, underlayOffsetY)).a;\n      #endif\n    } else if (texture_idx <= 6.0) {\n      curDistance = texture2D(texture6, v_uv0).a;\n      #if USE_UNDERLAY\n        underlayDistance = texture2D(texture6, v_uv0 + vec2(-underlayOffsetX, underlayOffsetY)).a;\n      #endif\n    } else if (texture_idx <= 7.0) {\n      curDistance = texture2D(texture7, v_uv0).a;\n      #if USE_UNDERLAY\n        underlayDistance = texture2D(texture7, v_uv0 + vec2(-underlayOffsetX, underlayOffsetY)).a;\n      #endif\n    }\n  #endif\n  float faceValue = 1.0 - faceDilate;\n  float faceDistance = smoothstep(faceValue - faceSoftness, faceValue + faceSoftness, curDistance);\n  vec4 fragColor = vec4(v_color.rgb * faceColor.rgb, faceColor.a * faceDistance);\n  #if USE_OUTLINE\n    float outEdge1 = faceValue - outlineThickness;\n    float outEdge2 = faceValue;\n    float outlineDistance = smoothstep(outEdge1 - faceSoftness, outEdge1 + faceSoftness, curDistance) - smoothstep(outEdge2 - faceSoftness, outEdge2 + faceSoftness, curDistance);\n    float faceClip = step(0.001, faceColor.a);\n    float outClip = step(0.001, outlineColor.a);\n    fragColor.rgb = v_color.rgb * faceColor.rgb * faceDistance * faceClip + outlineColor.rgb * outlineDistance * outClip;\n    fragColor.a = faceColor.a * faceDistance + outlineColor.a * outlineDistance;\n  #endif\n  #if USE_UNDERLAY\n    float underlayValue = 1.0 - underlayDilate;\n    float underlayAlpha = smoothstep(underlayValue - underlaySoftness, underlayValue + underlaySoftness, underlayDistance);\n    vec4 finalUnderlayColor = vec4(underlayColor.rgb, underlayAlpha * underlayColor.a);\n    if (fragColor.a < 1.0 && finalUnderlayColor.a > 0.0) {\n      fragColor.rgb *= fragColor.a;\n      fragColor += finalUnderlayColor * (1.0 - fragColor.a);\n    }\n  #endif\n  #if USE_GLOW\n    float delta = curDistance - glowOffset;\n    float deltaFactor = step(0.0, delta);\n    float attenuation = pow(abs(delta), glowPower) * 2.0;\n    float alpha = clamp(max(glowInner - attenuation, 0.0) / glowInner, 0.0, 1.0) * deltaFactor + clamp((glowOuter - attenuation) / glowOuter, 0.0, 1.0) * (1.0 - deltaFactor);\n    fragColor += glowColor * glowColor.a * alpha;\n  #endif\n  fragColor.a *= v_color.a;\n  ALPHA_TEST(fragColor);\n  gl_FragColor = fragColor;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nin vec4 a_color_extra;\nout vec4 v_color;\nin vec2 a_uv0;\nout vec2 v_uv0;\nin float a_texture_idx;\nout float texture_idx;\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  v_uv0 = a_uv0;\n  texture_idx = a_texture_idx;\n  v_color = a_color * a_color_extra;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\nin vec4 v_color;\nin vec2 v_uv0;\nin float texture_idx;\n#if USE_TEXTURE_LEVEL_1\n  uniform sampler2D texture0;\n#endif\n#if USE_TEXTURE_LEVEL_2\n  uniform sampler2D texture1;\n#endif\n#if USE_TEXTURE_LEVEL_3\n  uniform sampler2D texture2;\n  uniform sampler2D texture3;\n#endif\n#if USE_TEXTURE_LEVEL_4\n  uniform sampler2D texture4;\n  uniform sampler2D texture5;\n  uniform sampler2D texture6;\n  uniform sampler2D texture7;\n#endif\nuniform Face {\n  vec4 faceColor;\n  float faceDilate;\n  float faceSoftness;\n};\n#if USE_OUTLINE\n  uniform Outline {\n    vec4 outlineColor;\n    float outlineThickness;\n  };\n#endif\n#if USE_UNDERLAY\n  uniform Underlay {\n    vec4 underlayColor;\n    float underlayOffsetX;\n    float underlayOffsetY;\n    float underlayDilate;\n    float underlaySoftness;\n  };\n#endif\n#if USE_GLOW\n  uniform Glow {\n    vec4 glowColor;\n    float glowOffset;\n    float glowInner;\n    float glowOuter;\n    float glowPower;\n  };\n#endif\nvoid main () {\n  float curDistance = 0.0;\n  #if USE_UNDERLAY\n    float underlayDistance = 0.0;\n  #endif\n  #if USE_TEXTURE_LEVEL_1\n    if (texture_idx <= 0.0) {\n      curDistance = texture2D(texture0, v_uv0).a;\n      #if USE_UNDERLAY\n        underlayDistance = texture2D(texture0, v_uv0 + vec2(-underlayOffsetX, underlayOffsetY)).a;\n      #endif\n    }\n  #endif\n  #if USE_TEXTURE_LEVEL_2\n    else if (texture_idx <= 1.0) {\n      curDistance = texture2D(texture1, v_uv0).a;\n      #if USE_UNDERLAY\n        underlayDistance = texture2D(texture1, v_uv0 + vec2(-underlayOffsetX, underlayOffsetY)).a;\n      #endif\n    }\n  #endif\n  #if USE_TEXTURE_LEVEL_3\n    else if (texture_idx <= 2.0) {\n      curDistance = texture2D(texture2, v_uv0).a;\n      #if USE_UNDERLAY\n        underlayDistance = texture2D(texture2, v_uv0 + vec2(-underlayOffsetX, underlayOffsetY)).a;\n      #endif\n    } else if (texture_idx <= 3.0) {\n      curDistance = texture2D(texture3, v_uv0).a;\n      #if USE_UNDERLAY\n        underlayDistance = texture2D(texture3, v_uv0 + vec2(-underlayOffsetX, underlayOffsetY)).a;\n      #endif\n    }\n  #endif\n  #if USE_TEXTURE_LEVEL_4\n    else if (texture_idx <= 4.0) {\n      curDistance = texture2D(texture4, v_uv0).a;\n      #if USE_UNDERLAY\n        underlayDistance = texture2D(texture4, v_uv0 + vec2(-underlayOffsetX, underlayOffsetY)).a;\n      #endif\n    } else if (texture_idx <= 5.0) {\n      curDistance = texture2D(texture5, v_uv0).a;\n      #if USE_UNDERLAY\n        underlayDistance = texture2D(texture5, v_uv0 + vec2(-underlayOffsetX, underlayOffsetY)).a;\n      #endif\n    } else if (texture_idx <= 6.0) {\n      curDistance = texture2D(texture6, v_uv0).a;\n      #if USE_UNDERLAY\n        underlayDistance = texture2D(texture6, v_uv0 + vec2(-underlayOffsetX, underlayOffsetY)).a;\n      #endif\n    } else if (texture_idx <= 7.0) {\n      curDistance = texture2D(texture7, v_uv0).a;\n      #if USE_UNDERLAY\n        underlayDistance = texture2D(texture7, v_uv0 + vec2(-underlayOffsetX, underlayOffsetY)).a;\n      #endif\n    }\n  #endif\n  float faceValue = 1.0 - faceDilate;\n  float faceDistance = smoothstep(faceValue - faceSoftness, faceValue + faceSoftness, curDistance);\n  vec4 fragColor = vec4(v_color.rgb * faceColor.rgb, faceColor.a * faceDistance);\n  #if USE_OUTLINE\n    float outEdge1 = faceValue - outlineThickness;\n    float outEdge2 = faceValue;\n    float outlineDistance = smoothstep(outEdge1 - faceSoftness, outEdge1 + faceSoftness, curDistance) - smoothstep(outEdge2 - faceSoftness, outEdge2 + faceSoftness, curDistance);\n    float faceClip = step(0.001, faceColor.a);\n    float outClip = step(0.001, outlineColor.a);\n    fragColor.rgb = v_color.rgb * faceColor.rgb * faceDistance * faceClip + outlineColor.rgb * outlineDistance * outClip;\n    fragColor.a = faceColor.a * faceDistance + outlineColor.a * outlineDistance;\n  #endif\n  #if USE_UNDERLAY\n    float underlayValue = 1.0 - underlayDilate;\n    float underlayAlpha = smoothstep(underlayValue - underlaySoftness, underlayValue + underlaySoftness, underlayDistance);\n    vec4 finalUnderlayColor = vec4(underlayColor.rgb, underlayAlpha * underlayColor.a);\n    if (fragColor.a < 1.0 && finalUnderlayColor.a > 0.0) {\n      fragColor.rgb *= fragColor.a;\n      fragColor += finalUnderlayColor * (1.0 - fragColor.a);\n    }\n  #endif\n  #if USE_GLOW\n    float delta = curDistance - glowOffset;\n    float deltaFactor = step(0.0, delta);\n    float attenuation = pow(abs(delta), glowPower) * 2.0;\n    float alpha = clamp(max(glowInner - attenuation, 0.0) / glowInner, 0.0, 1.0) * deltaFactor + clamp((glowOuter - attenuation) / glowOuter, 0.0, 1.0) * (1.0 - deltaFactor);\n    fragColor += glowColor * glowColor.a * alpha;\n  #endif\n  fragColor.a *= v_color.a;\n  ALPHA_TEST(fragColor);\n  gl_FragColor = fragColor;\n}"
      }
    }
  ],
  "subMetas": {}
}